
My API Key
	APIAccessKey = 95ccb7bd40264379acb64aa229e41e19_ks

New Requirements
	Convert the existing code into a class.
		-Remove the 'print' output lines that define multiple job requests inside the main for loop. (New Paradigm is 1 server job request per script call)
	Make a new function which only manages the inputs and sets up the config object, and then calls the class functions to 'DO' the request work and output the files. 	
	Move the configuration stuff out to a parameters file
	Write in a script arguments loading system to the main function
		-Make it so that a pointer to a params file is required
		-Make it so that many of the parameters can be overwritten with dashed '-' options
			-Options list
				-i 		(Input config file name) *Required
				-ds 	(Dataset Type, 
				-d1  	(Start Date, Earlier Date for temporal selection range)
				-d2  	(End Date, Later Date for temporal selection range
				 
		
(Notes on the new features)
So one way this script will most likely be used is that a scientist will want to be able to hook up a cron job to periodically pull data down from the server.
-One case, scientist wants the new monthly seasonal forecasts for a certain area.. so they can make a single config file that defines a selected area,
	

Move this out to a parameters.txt file.

Make it where you can just have multiple parameter files.
Run the scripts from command line, with a param file pointer as the input argument.


CSV OR Zip

Make sure overwrites to params file are put into the command line.


-I -ConfigFile Input
D1, D2, Dataset, OperationType, 


// Cleaning up the Script file for 0.70x release



#printMe(cserv_config.APIAccessKey)
#test_ShowConfigVariables()
#result_Python_Data_List = main_ProcessRequests(g_ConfigObj_List)
#printMe("Done processing all jobs.")


# OUTPUT
# Data Access Notes (Short cut to accessing particular data items of interest)
# result_Python_Data_Obj All Data generated by the script and server responses.. all in a single list.
# result_Python_Data_Obj[N]['JobConfigData']    # Original part of Configuration Object passed to the rest of the script for this individual request.
# result_Python_Data_Obj[N]['JobReturnData']    # Collection of all variables filled out in the script from given server responses.
# result_Python_Data_Obj[N]['JobReturnData']['ServerJobID']                    # The Job ID returned by the server on a successful job submission
# result_Python_Data_Obj[N]['JobReturnData']['JobData_ServerResponse_JSON']    # Original Job Data returned by the server, in JSON Format
# result_Python_Data_Obj[N]['JobReturnData']['csvHeaderList']                  # Array of strings that can be used as the headings for a CSV output (dynamically generated so that the operation selected is reflected in the heading)
# result_Python_Data_Obj[N]['JobReturnData']['csvWriteReady_DataObj']          # Array of key/value objects that are referenced by using the header list's array as the keys to each value for each data item.
# result_Python_Data_Obj[N]['JobReturnData']['downloadLink']                   # A URL to access raw data for 'download' jobs.  Note, the file is not actually downloaded, you must write additional code that gets the file from this url.  The URL should immediate start a download if put into a browser address bar.   # If you are not doing a download job, this value should be blank or 'NA'
# result_Python_Data_Obj[N]['JobReturnData']['rawData_FailedDatesList']        # Occasionally, the server fails to render a tif file when making the zip.  If any files for any date's fail, the dates for which they failed end up in this list of strings.


# If you need more detailed information on what this script is returning for use,
# There really is no substitute for running this next line of code and examining what it returns in detail.
#printMe("Raw Output test (Python List of Objects): " + str(result_Python_Data_List) ) 
#printMe(" ")
#printMe("SINGLE ITEM TEST")
#printMe("Test Data Access: result_Python_Data_Obj[0]['JobReturnData']['ServerJobID'] : " + str(result_Python_Data_List[0]['JobReturnData']['ServerJobID']))


# Note on what 'CSV Ready' means in the variable name.
# The data is returned in a simple format where you can run something very similar to these lines of code to output your own csv file.
# I leave the file out management to you so you can integrate this with your own system in whatever way you would like.

# Untested Example CSV Out Code (This code gathers the first Job's dataset, opens a file, writes the headers, than iterates through the data and writes each row. 
#rowHeadings = result_Python_Data_List[0]['JobReturnData']['csvHeaderList']
#singleDataSet = result_Python_Data_List[0]['JobReturnData']['csvWriteReady_DataObj']
#import csv
#myCSVFileName = "someFile.csv"
#f = csv.writer(open(myCSVFileName, "wb+"))
#f.writerow(rowHeadings)  # To overwrite or add rows, the format for 'rowHeadings' is an array of strings
#for row in singleDataSet:
#    f.writerow([
#                row['Date'],    # row[rowHeadings[0]],  (To get this dynamically...)
#                row['value']    # row[rowHeadings[1]]   (To get this dynamically... usually becomes 'avg' or 'min' or 'max')
#                ])




    # Do Script Request Stuff (Get return object)
    # Create CSV or Download File
    # If file creation fails, 
    #    Post Message to console about file creation for outfile failing.
    #    Then, 
    #        # For CSV, output to the console, 
    #        # For download file, output the download link to the console.
    
        
    
    #printMe("")
    printMe("(ALSO CHECK TO SEE THAT AN OUTPUT FILE NAME/PATH WAS SUPPLIED), CHECK TO SEE IF the file EXISTS, THROW ERROR IF NOT, IF SO, LOAD CONFIG FILE FIRST, LOAD ALL THE DATA INTO THE VARS FROM THE CONFIG, THEN GO THROUGH AND TRY/EXCEPT PARSE THE OVERRIDES.. THEN CALL THE SCRIPT! ")
    printMe("WRITE THE CSV CODE THAT WAS PLACED BELOW INTO THE SCRIPT, WRITE THE CODE TO ACTUALLY DOWNLOAD THE GENERATED FILE.")
    #print_UsageCommandLineArgumentList_ToConsole()
    
    # Check for 
    printMe("include config file input as a requirement, include output file as param")
    printMe("output list of required arguments (use -notation to differentiate from different options) ")
    printMe('Number of arguments:' + str( len(sys.argv) ) + 'arguments.')
    printMe('Argument List:' + str(sys.argv) )

// 
#GeometryCoords = [[18.28125,4.306640625],[30.76171875,3.955078125],[30.234375,0.263671875],[17.9296875,0.087890625],[18.28125,4.306640625]]
#GeometryCoords = [[8.28125,4.306640625],[30.76171875,13.955078125],[30.234375,0.263671875],[8.9296875,0.087890625],[8.28125,14.306640625]]


// Old stuff from settings
# This is a box in the west hemisphere somewhere (where there is NO eMODIS data)
GeometryCoords = [[-70.28125,22.306640625],[-40.76171875,22.955078125],[-40.234375,19.263671875],[-70.9296875,19.087890625],[-70.28125,22.306640625]]




// Old Settings file (the .py config file I made first)
# Edit the settings below to customize which data you are accessing.

# Enter your API Access Key (Should have been provided to you)
APIAccessKey = '95ccb7bd40264379acb64aa229e41e19_ks'


# Data type of request.  # supported values "CHIRPS", "eMODIS", "Seasonal_Forecast"
DatasetType = 'Seasonal_Forecast' # "CHIRPS"  # "eMODIS"  # "Seasonal_Forecast"



#OperationType":g_OperationType,
#EarliestDate":g_Earliest_Date,
#LatestDate":g_Latest_Date,
#GeometryCoords":g_GeometryCoords,
#SeasonalEnsemble":g_Seasonal_Ensemble,
#SeasonalVariable":g_Seasonal_Variable,

#BaseURL":g_BaseURL


# From the config file

[DEFAULT]
hmm = 55

# Enter your API Access Key (Should have been provided to you)
APIAccessKey = '95ccb7bd40264379acb64aa229e41e19_ks'

# Edit the settings below to customize which data you are accessing.


# Data type of request. supported values 'CHIRPS', 'eMODIS', 'Seasonal_Forecast'
DatasetType = 'Seasonal_Forecast' 



#OperationType":g_OperationType,
#EarliestDate":g_Earliest_Date,
#LatestDate":g_Latest_Date,
#GeometryCoords":g_GeometryCoords,
#SeasonalEnsemble":g_Seasonal_Ensemble,
#SeasonalVariable":g_Seasonal_Variable,

#BaseURL":g_BaseURL




==========  START
// This is from when the script settings used to be contained within the same python file as the script itself
// Now the settings have been moved to a config ini file



# Script Run Settings and Notes
# Edit the settings below to customize which data you are accessing.

# Enter your API Access Key
g_API_AccessKey = '95ccb7bd40264379acb64aa229e41e19_ks'

# Data type of request.  # supported values "CHIRPS", "eMODIS", "Seasonal_Forecast"
g_DatasetType = 'Seasonal_Forecast' # "CHIRPS"  # "eMODIS"  # "Seasonal_Forecast"

# Operation Type to perform.  # Supported values are 'Average','Min','Max','Download' (Note, 'Download' is only supported for seasonal forecasts at this time)  
g_OperationType = "Max" # "Average" # "Min" # "Max" # "Download" 

# Geometry.  #Closed Polygon array of coordinates.  # Array of Longitude,Latitude coordinate pairs.
# [Longitude, Latitude]  # Remember, Last Element in array must match first (to close the polygon) 
# Does not have to be a rectangle!  Last Coord must equal the First
g_GeometryCoords = [
                    [18.28125,4.306640625],
                    [30.76171875,3.955078125],
                    [30.234375,0.263671875],
                    [17.9296875,0.087890625],
                    [18.28125,4.306640625]
                    ] 

# Enter the Start and End date range. (Format is MM/DD/YYYY, Fixed 10 characters including forward slashes) ( Example: Jan 3rd, 2015 would be 01/03/2015)
g_Earliest_Date = "12/01/2015" # "01/03/2015"   
g_Latest_Date = "12/25/2015" # "01/21/2015"
# Note above Seasonal_Forecast date range.
#  Seasonal_Forecasts are updated monthly (around the 10th of each month)  The active Seasonal_Forecast dataset which is served is overwritten each month during the updates.
#  If the current forecasted dataset is Nov 2015, and you are interested in getting forecast day range, 1 through 5.
#     Your 'g_Earliest_Date' value would be '11/01/2015' and your 'g_Latest_Date' value would be '11/05/2015'
#     Max number of days forecasted out is 180 from the start of the month.
#     Future versions of this script should support entering a range of days and dynamically converting to the most current dataset in the system.

# Seasonal Forecast Parameters (These are ignored for non 'Seasonal_Forecast' dataset type)
# Don't leave these blank, even if you aren't doing a Seasonal_Forecast run
g_Seasonal_Ensemble = "ens01"            # Single value only, Supported options are "ens01" through "ens10"
g_Seasonal_Variable = "Precipitation"         # Single value only, Supported options are "Precipitation" or "Temperature"




# URL Path to API
#g_BaseURL = "http://climateserv.nsstc.nasa.gov/chirps/scriptAccess/" # Live Environment
g_BaseURL = "http://localhost:8000/scriptAccess/"  # Localhost Script development and testing




# To Do Multiple Requests on a single script run, Add Additional Objects to this Config List.
# (fill this object out with your request parameters)
g_ConfigObj_List = [
    # First Script Job Request Item
    {
        "DatasetType":g_DatasetType,
        "OperationType":g_OperationType,
        "EarliestDate":g_Earliest_Date,
        "LatestDate":g_Latest_Date,
        "GeometryCoords":g_GeometryCoords,
        "SeasonalEnsemble":g_Seasonal_Ensemble,
        "SeasonalVariable":g_Seasonal_Variable,
        "APIAccessKey":g_API_AccessKey,
        "BaseURL":g_BaseURL
    },
    # Second Script Job Request Item (Example, single variable Override)
    {
        "DatasetType":g_DatasetType,
        "OperationType":g_OperationType,
        "EarliestDate":g_Earliest_Date,
        "LatestDate":g_Latest_Date,
        "GeometryCoords":g_GeometryCoords,
        "SeasonalEnsemble":"ens02",             # Example, we want the same dates, operation, geometry but we want a second ensemble in this dataset.
        "SeasonalVariable":g_Seasonal_Variable,
        "APIAccessKey":g_API_AccessKey,
        "BaseURL":g_BaseURL
    },
    # Third Script Job Request Item 
    # {},
    #...
    # Nth Script Job Request Item
    #{}
]


==========  END



Other Stuff
f = csv.writer(open(myCSVFileName, "wb+"))
            f.writerow(rowHeadings)  # To overwrite or add rows, the format for 'rowHeadings' is an array of strings
            for row in singleDataSet:
                f.writerow([
                            row[rowHeadings[0]],    #row['Date'],    # row[rowHeadings[0]],  (To get this dynamically...)
                            row[rowHeadings[1]]     #row['value']    # row[rowHeadings[1]]   (To get this dynamically... usually becomes 'avg' or 'min' or 'max')
                            ])
                            

def test_ShowConfigVariables():
    printMe("")
    printMe("")
    printMe("!!!! DEBUG TEST START !!!!")
    hcFileName = '/Users/kris/Desktop/K_Tasks/CHIRPS_Work/CHIRPS/chirps/servirchirpsdjango/APIScriptAccess/cserv_config.ini'#'cserv_config.ini'
    
    # Make sure the file actually exists first
    doesFileExist = os.path.isfile(hcFileName) 
    printMe("File: " + hcFileName + ", exists? : " + str(doesFileExist))

    # Config Parser object
    config = ConfigParser.ConfigParser()
    
    # Open the config file
    config.read(hcFileName)
    
    cserv_config = {
                    'APIAccessKey':config.get('DEFAULT', 'APIAccessKey', 1),
                    'DatasetType': config.get('DEFAULT', 'DatasetType', 1),
                    'OperationType': config.get('DEFAULT', 'OperationType', 1),
                    'SeasonalEnsemble': config.get('DEFAULT', 'SeasonalEnsemble', 1),
                    'SeasonalVariable': config.get('DEFAULT', 'SeasonalVariable', 1),
                    'EarliestDate': config.get('DEFAULT', 'EarliestDate', 1),
                    'LatestDate': config.get('DEFAULT', 'LatestDate', 1),
                    'GeometryCoords': config.get('DEFAULT', 'GeometryCoords', 1),
                    'BaseURL': config.get('DEFAULT', 'BaseURL', 1)
                    }
    
    
    printMe("cserv_config['APIAccessKey']: " + str(cserv_config['APIAccessKey']))
    printMe("cserv_config['DatasetType']: " + str(cserv_config['DatasetType']))
    printMe("cserv_config['OperationType']: " + str(cserv_config['OperationType']))
    printMe("cserv_config['SeasonalEnsemble']: " + str(cserv_config['SeasonalEnsemble']))
    printMe("cserv_config['SeasonalVariable']: " + str(cserv_config['SeasonalVariable']))
    printMe("cserv_config['EarliestDate']: " + str(cserv_config['EarliestDate']))
    printMe("cserv_config['LatestDate']: " + str(cserv_config['LatestDate']))
    printMe("cserv_config['GeometryCoords']: " + str(cserv_config['GeometryCoords']))
    printMe("cserv_config['BaseURL']: " + str(cserv_config['BaseURL']))
    
    printMe("JSON LOADS   json.loads(cserv_config['GeometryCoords']) : " + str(json.loads(str(cserv_config['GeometryCoords']))))
    
    #printMe("cserv_config.OperationType: " + str(cserv_config.OperationType))
    #printMe("cserv_config.SeasonalEnsemble: " + str(cserv_config.SeasonalEnsemble))
    #printMe("cserv_config.SeasonalVariable: " + str(cserv_config.SeasonalVariable))
    #printMe("cserv_config.EarliestDate: " + str(cserv_config.EarliestDate))
    #printMe("cserv_config.LatestDate: " + str(cserv_config.LatestDate))
    #printMe("cserv_config.GeometryCoords: " + str(cserv_config.GeometryCoords))
    #printMe("cserv_config.BaseURL: " + str(cserv_config.BaseURL))
    
    printMe("!!!! DEBUG TEST END !!!!")
    printMe("")
    printMe("")
    
    
    
// Old Code and Old Notes


# Attempt to parse out all of the arguments
    #printMe("THIS NEXT FOR LOOP IS NOT NECESSARY, INSTEAD, JUST DO A TRY/EXCEPT AND ATTEMPT TO OVERWRITE THE CONFIG OPTION IF IT EXISTS.")
    #try:
    #    # TODO, Fill the ArgumentsObject up
    #    for i, val in enumerate(theArgs):
    #        printMe("i : " + str(i))
    #        printMe("val : " + str(val))
    #    pass
    #
    #except:
    #    printMe("ERROR: There was an error parsing all of the command line parameters.  See Usage below")
    #    printMe("")
    #    print_UsageCommandLineArgumentList_ToConsole()
    
    
# Future Version, support multiple ensemble and multiple variable calls
#g_HC_Seasonal_Ensembles = ["ens01", "ens09", "ens10"]  # Expects a list, if only a single ensemble is needed, enclose that in braces like this:  ["ens01"]   If more than 1 is needed, separate strings with commas.
#g_HC_Seasonal_Variables = ["Precipitation"] # Supported Values, ["Precipitation"] or ["Temperature"] or ["Precipitation","Temperature"]
# Future Version, support dynamic forecast ranging.
#g_HC_Forecast_Range_Start = 1    # Min value is 1, cannot be greater than End value
#g_HC_Forecast_Range_End = 10     # Max Value is 180, cannot be less than Start value




# Put class here
#class ClimateSERV_API_Access:
#    _BaseURL = None    
#    def __init__(self, configObject):
#s        pass
    




# FIRST REAL TEST!!
# Console Outputs
#New Job Submitted to the Server: New JobID: 0fcb7ce5-0390-4800-aea4-782fd5ffe6b3
#Current Job Progress: 16.  JobID: 0fcb7ce5-0390-4800-aea4-782fd5ffe6b3
#Current Job Progress: 100.  JobID: 0fcb7ce5-0390-4800-aea4-782fd5ffe6b3
#Result of Job Status Cycle: complete
#Job, 0fcb7ce5-0390-4800-aea4-782fd5ffe6b3 is done, did it succeed? : True
#Job 0fcb7ce5-0390-4800-aea4-782fd5ffe6b3 Outputs:
#- getJobData_Response: {u'data': [{u'date': u'12/2/2015', u'value': 1, u'epochTime': u'1449036000', u'workid': u'82efbf81-db93-4dd1-be46-0c2f6f8a0893'}, {u'date': u'12/3/2015', u'value': 1, u'epochTime': u'1449122400', u'workid': u'b764568e-a9e2-419a-835a-1fc091be6339'}, {u'date': u'12/4/2015', u'value': 1, u'epochTime': u'1449208800', u'workid': u'7b218625-c8c1-4273-806a-444a74c3b1c8'}, {u'date': u'12/5/2015', u'value': 1, u'epochTime': u'1449295200', u'workid': u'a2602847-8992-45c1-8a63-383c4f8b0360'}, {u'date': u'12/6/2015', u'value': 1, u'epochTime': u'1449381600', u'workid': u'd6fded28-fb44-4f78-8db2-a51aaa5f1908'}, {u'date': u'12/7/2015', u'value': 1, u'epochTime': u'1449468000', u'workid': u'b6d91694-33e3-48d0-b687-ed04391546f7'}]}
#- csvHeaderList: ['date', 'FileGenerationSuccess']
#- csvReady_DataObj: [{'date': '12/2/2015', 'FileGenerationSuccess': '1'}, {'date': '12/3/2015', 'FileGenerationSuccess': '1'}, {'date': '12/4/2015', 'FileGenerationSuccess': '1'}, {'date': '12/5/2015', 'FileGenerationSuccess': '1'}, {'date': '12/6/2015', 'FileGenerationSuccess': '1'}, {'date': '12/7/2015', 'FileGenerationSuccess': '1'}]
#- downloadLink: http://localhost:8000/scriptAccess/?a=4&cmd=getFileForJobID&id=0fcb7ce5-0390-4800-aea4-782fd5ffe6b3&t=95ccb7bd40264379acb64aa229e41e19_ks
#- Dates for files that failed to generate: []


# 0, 1, 5, 6
# if(operationType == "Average"):
#        return 5
#    if(operationType == "Max"):
#        return 0
#    if(operationType == "Min"):
#        return 1
#    if(operationType == "Download"):
#        return 6
# Job Data (getJobData_Response): {u'data': [{u'date': u'12/2/2015', u'value': 1, u'epochTime': u'1449036000', u'workid': u'19bc1f65-b61a-4de5-8d06-d2c759575899'}, {u'date': u'12/3/2015', u'value': 1, u'epochTime': u'1449122400', u'workid': u'c3a50179-04e8-40b9-b3e7-7cc13fb2c9c2'}, {u'date': u'12/4/2015', u'value': 1, u'epochTime': u'1449208800', u'workid': u'41d32809-f5dc-4119-a2e3-31bfd6aed634'}, {u'date': u'12/5/2015', u'value': 1, u'epochTime': u'1449295200', u'workid': u'd93f409d-b9c8-4122-ab69-53fb8b349ce7'}, {u'date': u'12/6/2015', u'value': 1, u'epochTime': u'1449381600', u'workid': u'6d56a85c-69ff-416f-ac98-19425908a5f4'}, {u'date': u'12/7/2015', u'value': 1, u'epochTime': u'1449468000', u'workid': u'0195c76d-06ef-4f55-9188-d668179e5e75'}]}
# csvReady_DataObj: [{'date': '12/2/2015', 'FileGenerationSuccess': '1'}, {'date': '12/3/2015', 'FileGenerationSuccess': '1'}, {'date': '12/4/2015', 'FileGenerationSuccess': '1'}, {'date': '12/5/2015', 'FileGenerationSuccess': '1'}, {'date': '12/6/2015', 'FileGenerationSuccess': '1'}, {'date': '12/7/2015', 'FileGenerationSuccess': '1'}]
# {u'data': [{u'date': u'12/2/2015', u'value': 1, u'epochTime': u'1449036000', u'workid': u'081a9d5b-034e-46d6-8cfe-980d0cceb5c1'}, {u'date': u'12/3/2015', u'value': 1, u'epochTime': u'1449122400', u'workid': u'43d90879-2d5e-4f89-b465-07c3f82af98d'}, {u'date': u'12/4/2015', u'value': 1, u'epochTime': u'1449208800', u'workid': u'5f8faada-3462-4616-822b-643f908e0977'}, {u'date': u'12/5/2015', u'value': 1, u'epochTime': u'1449295200', u'workid': u'2ceaba47-b7f0-45bb-871c-adcc953cef1f'}, {u'date': u'12/6/2015', u'value': 1, u'epochTime': u'1449381600', u'workid': u'91cc704a-f860-4822-bfb5-6d497359fa54'}, {u'date': u'12/7/2015', u'value': 1, u'epochTime': u'1449468000', u'workid': u'39b27e4b-d434-4ec3-bfcd-807396e10d65'}]}
# {u'data': [{u'date': u'1/3/2015', u'value': {u'avg': 0.23614020219231846}, u'epochTime': u'1420264800', u'workid': u'19596fcc-a0c0-409a-bdaf-30d5f1bf7dec'}, {u'date': u'1/4/2015', u'value': {u'avg': 0.044480158253714826}, u'epochTime': u'1420351200', u'workid': u'626c3c6c-3fdb-41dc-a1bb-9a9f44df8957'}, {u'date': u'1/5/2015', u'value': {u'avg': 0.0009134843036313256}, u'epochTime': u'1420437600', u'workid': u'd2be616c-04cd-494d-be52-37ab18ff1bb1'}, {u'date': u'1/6/2015', u'value': {u'avg': 0.13032624373441556}, u'epochTime': u'1420524000', u'workid': u'2f6b6937-0cfc-4695-96aa-3d11e463007c'}, {u'date': u'1/7/2015', u'value': {u'avg': 0.006779715023746406}, u'epochTime': u'1420610400', u'workid': u'f14abca1-fe97-4cdc-92b4-73b2e68e8076'}, {u'date': u'1/8/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420696800', u'workid': u'0f993466-a6e4-477a-aa01-4a418d745616'}, {u'date': u'1/9/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420783200', u'workid': u'35124085-6e55-48e8-98eb-37b47d0c6bfe'}, {u'date': u'1/10/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420869600', u'workid': u'c25ff338-9f65-4e59-abac-06926aadc08a'}, {u'date': u'1/11/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420956000', u'workid': u'14d83c4e-0f63-4638-ab28-c1175580b301'}, {u'date': u'1/12/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421042400', u'workid': u'0e17bfa9-36d4-4fdd-9d17-6024b862f0d9'}, {u'date': u'1/13/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421128800', u'workid': u'9a2341b2-b17a-464c-b7b0-1d189d2319fd'}, {u'date': u'1/14/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421215200', u'workid': u'e6c9f341-b480-49c0-a8d5-73989bca186e'}, {u'date': u'1/15/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421301600', u'workid': u'9a5d0a0d-8849-4f57-9c0d-69c6afed5371'}, {u'date': u'1/16/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421388000', u'workid': u'5b62bd41-1f35-4633-8bb7-35a8c75cc679'}, {u'date': u'1/17/2015', u'value': {u'avg': 0.06704234994402321}, u'epochTime': u'1421474400', u'workid': u'da00e111-2ef4-476f-a836-d4e0cd045c45'}, {u'date': u'1/18/2015', u'value': {u'avg': 0.01786090217409022}, u'epochTime': u'1421560800', u'workid': u'a785a48f-5319-4b21-a183-0d47e31ad196'}, {u'date': u'1/19/2015', u'value': {u'avg': 0.0015889321579034624}, u'epochTime': u'1421647200', u'workid': u'2e03ae9b-9004-43ba-b742-ca25ae6a7d80'}, {u'date': u'1/20/2015', u'value': {u'avg': 0.024869380230928134}, u'epochTime': u'1421733600', u'workid': u'ca6328a0-67dc-498a-a3fa-60dd7d48cbc8'}, {u'date': u'1/21/2015', u'value': {u'avg': 0.03024542177004351}, u'epochTime': u'1421820000', u'workid': u'35d464ea-f0bc-4348-b674-db9b81b913f8'}]}
{
    u'data': 
    [
        {
            u'date': u'1/3/2015', 
            u'value': 
            {
                u'avg': 0.23614020219231846
            }, 
            u'epochTime': u'1420264800', 
            u'workid': u'19596fcc-a0c0-409a-bdaf-30d5f1bf7dec'
        }, 
     {u'date': u'1/4/2015', u'value': {u'avg': 0.044480158253714826}, u'epochTime': u'1420351200', u'workid': u'626c3c6c-3fdb-41dc-a1bb-9a9f44df8957'}, 
     {u'date': u'1/5/2015', u'value': {u'avg': 0.0009134843036313256}, u'epochTime': u'1420437600', u'workid': u'd2be616c-04cd-494d-be52-37ab18ff1bb1'}, 
     {u'date': u'1/6/2015', u'value': {u'avg': 0.13032624373441556}, u'epochTime': u'1420524000', u'workid': u'2f6b6937-0cfc-4695-96aa-3d11e463007c'}, 
     {u'date': u'1/7/2015', u'value': {u'avg': 0.006779715023746406}, u'epochTime': u'1420610400', u'workid': u'f14abca1-fe97-4cdc-92b4-73b2e68e8076'}, 
     {u'date': u'1/8/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420696800', u'workid': u'0f993466-a6e4-477a-aa01-4a418d745616'}, 
     {u'date': u'1/9/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420783200', u'workid': u'35124085-6e55-48e8-98eb-37b47d0c6bfe'}, 
     {u'date': u'1/10/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420869600', u'workid': u'c25ff338-9f65-4e59-abac-06926aadc08a'}, 
     {u'date': u'1/11/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1420956000', u'workid': u'14d83c4e-0f63-4638-ab28-c1175580b301'}, {u'date': u'1/12/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421042400', u'workid': u'0e17bfa9-36d4-4fdd-9d17-6024b862f0d9'}, {u'date': u'1/13/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421128800', u'workid': u'9a2341b2-b17a-464c-b7b0-1d189d2319fd'}, {u'date': u'1/14/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421215200', u'workid': u'e6c9f341-b480-49c0-a8d5-73989bca186e'}, {u'date': u'1/15/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421301600', u'workid': u'9a5d0a0d-8849-4f57-9c0d-69c6afed5371'}, {u'date': u'1/16/2015', u'value': {u'avg': 0.0}, u'epochTime': u'1421388000', u'workid': u'5b62bd41-1f35-4633-8bb7-35a8c75cc679'}, {u'date': u'1/17/2015', u'value': {u'avg': 0.06704234994402321}, u'epochTime': u'1421474400', u'workid': u'da00e111-2ef4-476f-a836-d4e0cd045c45'}, {u'date': u'1/18/2015', u'value': {u'avg': 0.01786090217409022}, u'epochTime': u'1421560800', u'workid': u'a785a48f-5319-4b21-a183-0d47e31ad196'}, {u'date': u'1/19/2015', u'value': {u'avg': 0.0015889321579034624}, u'epochTime': u'1421647200', u'workid': u'2e03ae9b-9004-43ba-b742-ca25ae6a7d80'}, {u'date': u'1/20/2015', u'value': {u'avg': 0.024869380230928134}, u'epochTime': u'1421733600', u'workid': u'ca6328a0-67dc-498a-a3fa-60dd7d48cbc8'}, {u'date': u'1/21/2015', u'value': {u'avg': 0.03024542177004351}, u'epochTime': u'1421820000', u'workid': u'35d464ea-f0bc-4348-b674-db9b81b913f8'}]}

{
    u'data': 
    [
        {
            u'date': u'12/2/2015', 
            u'value': 1, 
            u'epochTime': u'1449036000', 
            u'workid': u'081a9d5b-034e-46d6-8cfe-980d0cceb5c1'
        }, 
     {u'date': u'12/3/2015', u'value': 1, u'epochTime': u'1449122400', u'workid': u'43d90879-2d5e-4f89-b465-07c3f82af98d'}, {u'date': u'12/4/2015', u'value': 1, u'epochTime': u'1449208800', u'workid': u'5f8faada-3462-4616-822b-643f908e0977'}, {u'date': u'12/5/2015', u'value': 1, u'epochTime': u'1449295200', u'workid': u'2ceaba47-b7f0-45bb-871c-adcc953cef1f'}, {u'date': u'12/6/2015', u'value': 1, u'epochTime': u'1449381600', u'workid': u'91cc704a-f860-4822-bfb5-6d497359fa54'}, {u'date': u'12/7/2015', u'value': 1, u'epochTime': u'1449468000', u'workid': u'39b27e4b-d434-4ec3-bfcd-807396e10d65'}]}

#def main_ProcessRequests_Tests():
#    
#    #baseRequestURL = get_BaseRequest_URL(g_BaseURL, g_)
#    print(g_BaseURL)
#    test_JobID = "1a1e4cd7-e915-442b-8459-2f0e06f8b32d"
#    print("test_JobID: " + test_JobID)
#    url_For_getDataRequestProgress = get_Request_URL_getDataRequestProgress(g_BaseURL, test_JobID)
#    url_For_getDataRequestProgress += get_URLParam_Key(g_API_AccessKey)
#    #url_For_getDataRequestProgress += get_URLParam_Callback("testCallBack_JobStatus")
#    print(url_For_getDataRequestProgress)
    
    # With Callback (Broken right now)
    #serverResponseFunction = get_ServerResponse(url_For_getDataRequestProgress)
    #serverResponseFunction()
    
    # No Callback
    #jobStatusList = get_ServerResponse(url_For_getDataRequestProgress)
    #testCallBack_JobStatus(jobStatusList)

    # Get Server Response
    #serverResponse = get_ServerResponse(url_For_getDataRequestProgress)
    #currentJobStatus = int(get_JobStatusValue_FromResponse(serverResponse))
    #print(currentJobStatus)
    
    #getJobResult_wait_ForJobProgressCycle
    
#    pass


# Test to check script functionality
# geometry:{"type":"Polygon","coordinates":[[[18.28125,4.306640625],[30.76171875,3.955078125],[30.234375,0.263671875],[17.9296875,0.087890625],[18.28125,4.306640625]]]}
# geometry:%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B18.28125%2C4.306640625%5D%2C%5B30.76171875%2C3.955078125%5D%2C%5B30.234375%2C0.263671875%5D%2C%5B17.9296875%2C0.087890625%5D%2C%5B18.28125%2C4.306640625%5D%5D%5D%7D
# Server Job ID (for the validation test)     0e9542ec-44d1-46da-9331-130c1f5661f5

# Test to see lat/long order
# geometry:{"type":"Polygon","coordinates":[[[120.5859375,10.283203125],[146.07421875,10.107421875],[147.12890625,-33.486328125],[121.9921875,-33.837890625],[120.5859375,10.283203125]]]}
# geometry:%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B120.5859375%2C10.283203125%5D%2C%5B146.07421875%2C10.107421875%5D%2C%5B147.12890625%2C-33.486328125%5D%2C%5B121.9921875%2C-33.837890625%5D%2C%5B120.5859375%2C10.283203125%5D%5D%5D%7D

# Geographical Bounding Box
#g_BoundingBox_North = 20.0 # Max Lat (float) 
#g_BoundingBox_South = -20.0 # Min Lat (float)
#g_BoundingBox_East = 25.0 # Max Long (float)
#g_BoundingBox_West = -25.0 # Min Long (float)

# TESTS.. REMOVE ME
#t1 = get_Request_URL(g_BaseURL, "someCallBackFunction", g_API_AccessKey)
#t1 = get_BaseRequest_URL(g_BaseURL, g_API_AccessKey, "GetProgress")
#print(t1)

# Remove the Notes

# TEST URL
#http://localhost:8000/scriptAccess/?callback=someCallBack&_=12345
#http://localhost:8000/scriptAccess/?_=123456&t=95ccb7bd40264379acb64aa229e41e19_ks

#print(jobStatusList)
#    jobStatusItem = jobStatusList[0]
#    print(jobStatusItem)
#    if(jobStatusItem == 100.0):
#        print("Job Complete")

#def testCallBack_JobStatus(jobStatusList):
#    print(jobStatusList)
#    jobStatusItem = jobStatusList[0]
#    print(jobStatusItem)
#    if(jobStatusItem == 100.0):
#        print("Job Complete")
#    else:
#        print("Job NOT complete, or error")
        
    #html = response.read()
    #return html
    #return response
    
    #def get_Request_URL(theBaseURL, callbackFunctionName, theKey):
#def get_BaseRequest_URL(theBaseURL, theKey, theCommand):
#    theURL = ""
#    #theURL += theBaseURL + "callback=" + callbackFunctionName
#    theURL += "&t=" + theKey
#    theURL += "&_=" + str(int(time.time()))
#    #theURL += "&cmd=" + theCommand
#    return theURL
